name: iOS Starter Workflow

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: Build & Test iOS App
    runs-on: macos-latest
    timeout-minutes: 30

    steps:
      # Step 1: Checkout repository
      - name: Checkout
        uses: actions/checkout@v4

      # Step 2: Select the latest Xcode version available
      - name: Select latest Xcode
        run: |
          sudo xcode-select -s /Applications/Xcode.app/Contents/Developer
          xcodebuild -version

      # Step 3: Detect default scheme dynamically
      - name: Detect Default Scheme
        id: scheme
        run: |
          echo "Detecting Xcode scheme..."
          scheme_list=$(xcodebuild -list -json | tr -d "\n")
          default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
          echo "Default scheme detected: $default"
          echo "scheme=$default" >> $GITHUB_OUTPUT

      # Step 4: Cache DerivedData (faster rebuilds)
      - name: Cache DerivedData
        uses: actions/cache@v4
        with:
          path: ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-xcode-${{ hashFiles('**/*.xcodeproj/**', '**/*.xcworkspace/**') }}
          restore-keys: |
            ${{ runner.os }}-xcode-

      # Step 5: Build for iOS Simulator
      - name: Build (Simulator)
        run: |
          echo "Starting iOS build..."
          device=$(xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//")
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then 
            filetype_parameter="workspace" 
            file_to_build=$(ls -A | grep -i \\.xcworkspace\$)
          else 
            filetype_parameter="project" 
            file_to_build=$(ls -A | grep -i \\.xcodeproj\$)
          fi
          echo "Building using $file_to_build and scheme ${{ steps.scheme.outputs.scheme }}"
          xcodebuild \
            -scheme "${{ steps.scheme.outputs.scheme }}" \
            -"$filetype_parameter" "$file_to_build" \
            -sdk iphonesimulator \
            -destination "platform=iOS Simulator,name=$device" \
            -configuration Debug \
            clean build | xcpretty

      # Step 6: Run Unit Tests
      - name: Run Unit Tests
        run: |
          echo "Running tests on simulator..."
          device=$(xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//")
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then 
            filetype_parameter="workspace" 
            file_to_build=$(ls -A | grep -i \\.xcworkspace\$)
          else 
            filetype_parameter="project" 
            file_to_build=$(ls -A | grep -i \\.xcodeproj\$)
          fi
          xcodebuild \
            test-without-building \
            -scheme "${{ steps.scheme.outputs.scheme }}" \
            -"$filetype_parameter" "$file_to_build" \
            -destination "platform=iOS Simulator,name=$device" \
            CODE_SIGNING_ALLOWED=NO | xcpretty && exit ${PIPESTATUS[0]}

      # Step 7: Upload build artifacts (optional)
      - name: Upload Build Artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: WeatherApp-Build
          path: |
            build/Debug-iphonesimulator/*.app
